#!/usr/bin/env sh

# pull in jq (for json string building)
apt-get update
apt-get -y install jq

# pull openapi-generator binary
wget --quiet https://repo1.maven.org/maven2/org/openapitools/openapi-generator-cli/4.3.0/openapi-generator-cli-4.3.0.jar -O openapi-generator-cli.jar

if [ $? -ne 0 ]
then
  echo "Error downloading openapi generator binary; aborting."
  exit 1
fi

# run generator
java -jar openapi-generator-cli.jar generate \
    --input-spec $INPUT_PATH \
    --generator-name typescript-axios \
    --additional-properties=supportsES6=true,modelPropertyNaming=original,withInterfaces=true \
    --output /client

if [ $? -ne 0 ]
then
  echo "Something went wrong running the openapi generator; aborting."
  exit 1
fi

cd /client

# write package.json with package name, description, version, and github repo
DATE=$(date -u +"%Y%m%d%H%M%S")
cat package.json.template | jq --arg pn "$INPUT_NAME" '.name="@birdiecare/\($pn)-client"' | jq --arg pn "$INPUT_NAME" '.description="Autogenerated API client for \($pn) service."' | jq --arg pn "$INPUT_NAME" '.repository.url="ssh://git@github.com/birdiecare/\($pn).git"' | jq --arg date "$DATE" '.version="0.0.\($date)"' > package.json

if [ $? -ne 0 ]
then
  echo "Something went wrong writing package.json; aborting."
  exit 1
fi

# install dependencies and build new package
npm i
npm run build

if [ $? -ne 0 ]
then
  echo "Failed to build package; aborting"
  exit 1
fi

# build npmrc for access to private package repo
echo "$INPUT_REGISTRY_NAMESPACE:registry=https://npm.pkg.github.com/" >> .npmrc
echo "//npm.pkg.github.com/:_authToken=$INPUT_TOKEN" >> .npmrc

# create dummy npm repo and install _current_ version of client package
mkdir old_version
cp .npmrc old_version/
cd old_version
npm init --yes
npm i $INPUT_REGISTRY_NAMESPACE/$INPUT_NAME-client
cd ..

# diff newly generated js with previous version
cksum dist/*.js | awk '{print $1":"$2}' > new_checksums
cksum old_version/node_modules/$INPUT_REGISTRY_NAMESPACE/$INPUT_NAME-client/*.js | awk '{print $1":"$2}' > old_checksums
diff old_checksums new_checksums

# exit if no differences or error calculating differences
if [ $? -eq 0 ]
then
  echo "No differences to publish, aborting build."
  exit 0
elif [ $? -ne 1 ]
then
  echo "Something went wrong comparing old to new package, aborting build."
  exit 1
fi  

echo "Differences found between old and new package. Publishing new package."

# copy package.json to dist folder and publish to GitHub package registry
cp package.json dist/
cp .npmrc dist/
cd dist
npm publish

if [ $? -ne 0 ]
then
  echo "Something went wrong publishing the NPM package."
  exit 1
else
  echo "Hatch action completed successfully."
  exit 0
fi
